generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  login           String           @unique
  email           String           @unique
  // Настройки профиля
  fullName        String?
  level           String?
  experience      String?
  about           String?
  city            String?
  specializations Specialization[] @relation("User Specializations")
  // Контакты
  website         String?
  phoneNumber     String?
  vk              String?
  telegram        String?

  password      String
  refreshToken  String?
  profileTypeId Int

  logoFileName               String?
  coverFileName              String?
  // Уведомления
  rewardNotifications        Boolean @default(false)
  weeklySummaryNotifications Boolean @default(false)
  joinAuthorsNotifications   Boolean @default(false)

  // Статистика
  following User[] @relation("UserFollows")
  followers User[] @relation("UserFollows")

  favorites   User[] @relation("UserStarred") // избранное
  favoritedBy User[] @relation("UserStarred") // те, кто добавил в избранное

  likedBy   User[] @relation("UserLikes") // те, кто поставили лайк
  likedUser User[] @relation("UserLikes") // лайки пользователя

  isResetVerified Boolean     @default(false)
  isEmailVerified Boolean     @default(false)
  profileType     ProfileType @relation(fields: [profileTypeId], references: [id])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLoginUpdate DateTime?
  projects        Project[]
}

model ProfileType {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]
}

model Specialization {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  users   User[]    @relation("User Specializations")
  Project Project[]
}

// Проект
model Project {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  photoName   String
  firstLink   String?
  secondLink  String?

  categoryId       Int
  userId           Int
  specializationId Int
  specialization   Specialization @relation(fields: [specializationId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
  category         Category       @relation(fields: [categoryId], references: [id])
  content          Json?

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
}

// Категория проекта
model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  projects Project[]
}
