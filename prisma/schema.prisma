generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  login           String           @unique
  email           String           @unique
  // Настройки профиля
  fullName        String?
  level           String?
  experience      String?
  about           String?
  city            String?
  specializations Specialization[] @relation("User Specializations")
  // Контакты
  website         String?
  phoneNumber     String?
  vk              String?
  telegram        String?

  password      String
  refreshToken  String?

  logoFileName               String?
  coverFileName              String?
  // Уведомления
  rewardNotifications        Boolean @default(false)
  weeklySummaryNotifications Boolean @default(false)
  joinAuthorsNotifications   Boolean @default(false)

  // Статистика
  following User[] @relation("UserFollows")
  followers User[] @relation("UserFollows")

  favorites   User[] @relation("UserStarred") // избранное
  favoritedBy User[] @relation("UserStarred") // те, кто добавил в избранное

  likedBy   User[] @relation("UserLikes") // те, кто поставили лайк
  likedUser User[] @relation("UserLikes") // лайки пользователя

  likedProjects  Project[] @relation("ProjectLikes")
  viewedProjects Project[] @relation("ProjectViews") // проекты, просмотренные пользователем

  likedBlogs  Blog[] @relation("BlogLikes")
  viewedBlogs Blog[] @relation("BlogViews")

  isResetVerified Boolean     @default(false)
  isEmailVerified Boolean     @default(false)

  status String @default("offline") // для чата

  // Подписка
  subscriptionId      Int           @default(1)
  subscription        Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionStartAt DateTime? // Дата начала подписки
  subscriptionEndAt   DateTime? // Дата окончания подписки

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLoginUpdate DateTime?
  projects        Project[]
  Blog            Blog[]
  blogId          Int?

  // Сообщения
  sentMessages     Message[] @relation("Sender") // Убрано onDelete отсюда
  receivedMessages Message[] @relation("Receiver") // Убрано onDelete отсюда
  Payment          Payment[]
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String?
  filePath   String?
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)
  sender     User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade) // onDelete только здесь
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade) // onDelete только здесь
}

model Payment {
  id                Int      @id @default(autoincrement())
  amount            Float
  purpose           String
  orderId           String   @unique
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade) // onDelete остается здесь
  operationId       String   @unique
  externalPaymentId String?
  paymentLink       String
  status            String   @default("pending")
  expiresAt         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([operationId])
  @@index([externalPaymentId])
  @@index([status])
}

model Subscription {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  price       Decimal  @default(0)
  duration    Int      @default(30)
  isDefault   Boolean  @default(true)
  ratingBoost Int?
  features    String[]
  User        User[]
}

model Specialization {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  users   User[]    @relation("User Specializations")
  Project Project[]
  Blog    Blog[]
}

model Project {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  photoName   String?
  firstLink   String?
  secondLink  String?

  categoryId       Int
  userId           Int
  specializationId Int
  specialization   Specialization @relation(fields: [specializationId], references: [id])
  likedBy          User[]         @relation("ProjectLikes")
  viewedBy         User[]         @relation("ProjectViews")
  category         Category       @relation(fields: [categoryId], references: [id])
  contentPath      String?        @unique
  contentSize      Int?
  contentHash      String?

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Blog {
  id        Int     @id @default(autoincrement())
  name      String
  photoName String?

  contentPath String? @unique
  contentSize Int?
  contentHash String?

  userId  Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedBy User[] @relation("BlogLikes")

  viewedBy User[] @relation("BlogViews")

  specializationId Int
  specialization   Specialization @relation(fields: [specializationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  projects Project[]
}